file = File.open('build_settings')
contents = file.read
@settings = eval(contents)

desc 'Show version of the script'
task :showversion do
  puts "1.1"
end

desc 'Build IPA'
task :buildipa do
  puts "Attempting to build IPA..."
  sh "rm -rf *.ipa"
  sh "rm -rf *.app.dSYM.zip"
  if @settings[:workspace] then
    sh "ipa build --scheme #{@settings[:scheme]} --workspace #{@settings[:workspace]} --configuration #{@settings[:configuration]} --clean /tmp"
  else
    sh "ipa build --scheme #{@settings[:scheme]} --project #{@settings[:project]} --configuration #{@settings[:configuration]} --clean /tmp"
  end
end

desc "Generates HTML documentation using appledoc"
task :docs do
  system <<-EOS
    appledoc \\
      --project-name #{@settings[:app_name]} \\
      --project-company #{@settings[:company]} \\
      --company-id #{@settings[:company_id]} \\
      --output docs \\
      --create-html \\
      --no-create-docset \\
      --ignore Pods \\
      --keep-intermediate-files .
  EOS
end

def release_notes
  begin
    IO.read('RELEASE_NOTES.md')
  rescue
    'Add RELEASE_NOTES.md at project root to post release notes.'
  end
end

desc 'Deploy build to C1 App Store'
task :internal => ['buildipa'] do
  puts "Attempt to release build to C1 App Store"
  puts "Checking for S3 Credentials"
  s3_access_key = ENV['AWS_ACCESS_KEY_ID']
  puts "Access Key Missing" unless s3_access_key
  s3_secret = ENV['AWS_SECRET_ACCESS_KEY']
  puts "Secret Key Missing" unless s3_secret
  if s3_access_key && s3_secret then
    sh "ipa distribute:s3 -b chaione-app-store/_inbox"
  else
    puts "Upload aborted"
  end
end

