
desc 'Load Build Settings'
task :loadsettings do
  file = File.open('build_settings')
  contents = file.read
  @settings = eval(contents)
end

desc 'Show version of the script'
task :showversion do
  puts "1.1.1"
end

desc 'Build IPA'
task :buildipa => ['loadsettings'] do
  puts "Attempting to build IPA..."
  sh "rm -rf *.ipa"
  sh "rm -rf *.app.dSYM.zip"
  if @settings[:workspace] then
    sh "ipa build --scheme #{@settings[:scheme]} --workspace #{@settings[:workspace]} --configuration #{@settings[:configuration]} --clean /tmp"
  else
    sh "ipa build --scheme #{@settings[:scheme]} --project #{@settings[:project]} --configuration #{@settings[:configuration]} --clean /tmp"
  end
end

desc "Generates HTML documentation using appledoc"
task :docs do
  system <<-EOS
    appledoc \\
      --project-name #{@settings[:app_name]} \\
      --project-company #{@settings[:company]} \\
      --company-id #{@settings[:company_id]} \\
      --output docs \\
      --create-html \\
      --no-create-docset \\
      --ignore Pods \\
      --keep-intermediate-files .
  EOS
end

def release_notes
  begin
    IO.read('RELEASE_NOTES.md')
  rescue
    'Add RELEASE_NOTES.md at project root to post release notes.'
  end
end

desc 'Check S3 Credentials'
task :checkS3 do
  puts "Checking for S3 Credentials"
  fail "ERROR: AWS_ACCESS_KEY_ID Not Set" unless ENV['AWS_ACCESS_KEY_ID']
  fail "ERROR: AWS_SECRET_ACCESS_KEY Not Set" unless ENV['AWS_SECRET_ACCESS_KEY']
end

desc 'Deploy build to C1 App Store'
task :internal => ['checkS3', 'buildipa'] do
  puts "Attempt to release build to C1 App Store"
  sh "ipa distribute:s3 -b chaione-app-store/_inbox"
  `curl -X GET 'https://appstore.chaione.com/api/update' >> /dev/null`
  puts "Successfully published the release build to C1 App Store"
end

